# Processes .dat files generated by the NI source into .CSV

import argparse
import csv
from pathlib import Path

import msgpack

# called on the data array for each channel for each message, do whatever processing you want


def process(channel):
    return sum(channel) / len(channel)


def write_CSV(infile, outfile):
    writer = csv.writer(outfile)
    channels = None  # columns of CSV file
    start = None  # offset timestamp so CSV file starts at 0
    for data in msgpack.Unpacker(infile):
        data, timestamp = data["data"], data["timestamp"]
        if not channels:  # first time through, set the order of the channels
            channels = sorted(data.keys())
            writer.writerow(["Timestamp"] + channels)  # write header
            start = timestamp
        writer.writerow([f"{timestamp - start:.6f}"] +
                        [f"{process(data[c]):.6f}" for c in channels])


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('file', help='The .dat file to read from')
    args = parser.parse_args()

    outfilename = Path(args.file).with_suffix(".csv")
    with open(args.file, 'rb') as infile, open(outfilename, 'w', encoding='utf-8', newline='') as outfile:
        write_CSV(infile, outfile)

    print(f"Successfully wrote data to {outfilename}")
